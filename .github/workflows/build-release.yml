name: Triggered Workflow

on:
  repository_dispatch:
    types: [tag-updated]

jobs:
  release:
    if: github.event.client_payload.tag != ''
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      description: ${{ steps.get_notes.outputs.description }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Latest Release
        id: get_notes
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        with:
          owner: SnosMe
          repo: awakened-poe-trade
          excludes: prerelease, draft
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.client_payload.tag }}
          release_name: Release ${{ github.event.client_payload.tag }}
          body: ${{ steps.get_notes.outputs.description }}
          draft: true
          prerelease: false


  renderer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: yarn --frozen-lockfile
        working-directory: ./renderer
      - run: yarn make-index-files
        working-directory: ./renderer
      - run: yarn lint
        working-directory: ./renderer
      - run: yarn build
        working-directory: ./renderer
      - uses: actions/upload-artifact@v3
        with:
          name: renderer-dist
          path: ./renderer/dist

  package:
    needs: renderer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - uses: actions/download-artifact@v3
        with:
          name: renderer-dist
          path: ./renderer/dist
      - run: yarn --frozen-lockfile
        working-directory: ./main
      - run: yarn build
        working-directory: ./main
      - run: yarn package -p onTagOrDraft
        working-directory: ./main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Hash
        run: type .\main\dist\latest.yml
        if: ${{ startsWith(matrix.os, 'windows') }}

  make-release-public:
    needs: [release, renderer, package]
    runs-on: ubuntu-latest
    steps:
      - name: Update release to public
        run: |
          curl \
            -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"draft": false}' \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.release.outputs.release_id }}"